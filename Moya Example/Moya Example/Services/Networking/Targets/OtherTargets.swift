//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import Alamofire
import Moya

struct OtherTargets {

    /**
    Get Client Token for puchasing( Assuming Braintree )
    - returns: PurchaseToken
    - JSON: ["description": "Successfully get user\'s calendar", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "PurchaseToken", "optionalValue": "", "raw": ["$ref": "#/definitions/PurchaseToken"], "optionalType": "PurchaseToken?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "PurchaseToken", "success": true]
    */



    struct GetUserPurchaseTokenTarget: APITargetType {
        let method: Moya.Method = .get

        let path: String = "/me/purchase-token"

    }

    /**
    Accept Invitation
    - returns: Group
    - JSON: ["description": "Successfully accept user\'s group invitation", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Group", "optionalValue": "", "raw": ["$ref": "#/definitions/Group"], "optionalType": "Group?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Group", "success": true]
    */



    struct AcceptMyGroupInvitationTarget: APITargetType {
        let method: Moya.Method = .post

        var path: String {
            let targetPath: String = "/me/groups/invitations/{id}/accept"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
    }

    /**
    Get Group which the user join
    - returns: Groups
    - JSON: ["description": "Successfully get user\'s groups", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Groups", "optionalValue": "", "raw": ["$ref": "#/definitions/Groups"], "optionalType": "Groups?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Groups", "success": true]
    */



    struct GetMyGroupTarget: APITargetType {
        let method: Moya.Method = .get

        let path: String = "/me/groups"

        let offset: Int?
        let limit: Int?

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var queryParams: Parameters = [:]
            queryParams["offset"] = offset
            queryParams["limit"] = limit
            compositeParameters.query = queryParams

            return compositeParameters.toParameters()
        }
    }

    /**
    Get User Event Calendar
    - returns: Calendar
    - JSON: ["description": "Successfully get user\'s calendar", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Calendar", "optionalValue": "", "raw": ["$ref": "#/definitions/Calendar"], "optionalType": "Calendar?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Calendar", "success": true]
    */



    struct GetUserCalendarTarget: APITargetType {
        let method: Moya.Method = .get

        let path: String = "/me/calendar"

    }

    /**
    Update User Informations
    - returns: Me
    - JSON: ["description": "Successfully update user\'s informations", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Me", "optionalValue": "", "raw": ["$ref": "#/definitions/Me"], "optionalType": "Me?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Me", "success": true]
    */



    struct PutUserInfoTarget: APITargetType {
        let method: Moya.Method = .put

        let path: String = "/me"
        var task: Task {
            var formData: [Moya.MultipartFormData] = []
            if let profileImage = profileImage {
                let profileImageData = Moya.MultipartFormData(provider: .data(profileImage), name: "profile_image", fileName: "profile_image", mimeType: profileImage.mimeType)
                formData.append(profileImageData)
            }
            return .upload(.multipart(formData))
        }

        let email: String?
        let password: String?
        let name: String?
        let phoneNumber: String?
        let profileImage: Data?

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var formParams: Parameters = [:]
            formParams["email"] = email
            formParams["password"] = password
            formParams["name"] = name
            formParams["phone_number"] = phoneNumber
            compositeParameters.form = formParams

            return compositeParameters.toParameters()
        }
    }

    /**
    Get User Informations
    - returns: Me
    - JSON: ["description": "Successfully get user\'s informations", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Me", "optionalValue": "", "raw": ["$ref": "#/definitions/Me"], "optionalType": "Me?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Me", "success": true]
    */

    struct GetUserInfoTarget: APITargetType {
        let method: Moya.Method = .get

        let path: String = "/me"

    }

    /**
    Reject Invitation
    - returns: Status
    - JSON: ["description": "Successfully reject user\'s group invitation", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Status", "optionalValue": "", "raw": ["$ref": "#/definitions/Status"], "optionalType": "Status?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Status", "success": true]
    */



    struct RejectMyGroupInvitationTarget: APITargetType {
        let method: Moya.Method = .post

        var path: String {
            let targetPath: String = "/me/groups/invitations/{id}/reject"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
    }

    /**
    Get interests of the user
    - returns: Events
    - JSON: ["description": "Successfully get user\'s interests", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Events", "optionalValue": "", "raw": ["$ref": "#/definitions/Events"], "optionalType": "Events?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Events", "success": true]
    */



    struct GetMyInterestsTarget: APITargetType {
        let method: Moya.Method = .get

        let path: String = "/me/interests"

        let offset: Int?
        let limit: Int?

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var queryParams: Parameters = [:]
            queryParams["offset"] = offset
            queryParams["limit"] = limit
            compositeParameters.query = queryParams

            return compositeParameters.toParameters()
        }
    }

    /**
    Get Group Invitation you received
    - returns: Invitations
    - JSON: ["description": "Successfully get user\'s group invitation", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Invitations", "optionalValue": "", "raw": ["$ref": "#/definitions/Invitations"], "optionalType": "Invitations?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Invitations", "success": true]
    */



    struct GetMyGroupInvitationTarget: APITargetType {
        let method: Moya.Method = .get

        let path: String = "/me/groups/invitations"

        let offset: Int?
        let limit: Int?

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var queryParams: Parameters = [:]
            queryParams["offset"] = offset
            queryParams["limit"] = limit
            compositeParameters.query = queryParams

            return compositeParameters.toParameters()
        }
    }

    /**
    delete event from user's interest list
    - returns: Status
    - JSON: ["description": "Successfully remove event from interest list", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Status", "optionalValue": "", "raw": ["$ref": "#/definitions/Status"], "optionalType": "Status?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Status", "success": true]
    */



    struct RemoveFromInterestsTarget: APITargetType {
        let method: Moya.Method = .delete

        let path: String = "/me/interests/{id}"

        let id: Int

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var formParams: Parameters = [:]
            formParams["id"] = id
            compositeParameters.form = formParams

            return compositeParameters.toParameters()
        }
    }

    /**
    Get interests of the user
    - returns: Status
    - JSON: ["description": "Successfully add event to interest list", "name": "success201", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Status", "optionalValue": "", "raw": ["$ref": "#/definitions/Status"], "optionalType": "Status?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 201, "type": "Status", "success": true]
    */

    struct AddMyInterestsTarget: APITargetType {
        let method: Moya.Method = .post

        var path: String {
            let targetPath: String = "/me/interests/{id}"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
    }

    /**
     Add device of the user
     - returns: Status
     */

    struct AddDeviceTokenTarget: APITargetType {

        let method: Moya.Method = .post
        let path: String = "/me/devices"
        
        let token: String
        let type: String = "ios"

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var formParams: Parameters = [:]
            formParams["token"] = token
            formParams["type"] = type

            compositeParameters.form = formParams

            return compositeParameters.toParameters()
        }
    }
}
