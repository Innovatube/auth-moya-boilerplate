//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import Alamofire
import Moya

struct EventsTargets {

    /**
    Delete ticket ( Event owner can do if noone book the ticket )
    - returns: Status
    - JSON: ["description": "Successfully delete tickets", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Status", "optionalValue": "", "raw": ["$ref": "#/definitions/Status"], "optionalType": "Status?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Status", "success": true]
    */



    struct DeleteTicketTarget: APITargetType {
        let method: Moya.Method = .delete

        var path: String {
            let targetPath: String = "/tickets/{id}"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
    }

    /**
    Update ticketinfo ( Event owner can do ).
    - returns: Ticket
    - JSON: ["description": "Successfully update tickets", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Ticket", "optionalValue": "", "raw": ["$ref": "#/definitions/Ticket"], "optionalType": "Ticket?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Ticket", "success": true]
    */



    struct UpdateTicketTarget: APITargetType {
        let method: Moya.Method = .put

        var path: String {
            let targetPath: String = "/tickets/{id}"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
        let name: String?
        let timetableId: [Int]?
        let description: String?
        let price: Double?
        let priceCurrencyCode: String?
        let quantity: Int?
        let bookingStartAt: Int?
        let bookingEndAt: Int?

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var formParams: Parameters = [:]
            formParams["name"] = name
            formParams["timetable_id"] = timetableId
            formParams["description"] = description
            formParams["price"] = price
            formParams["price_currency_code"] = priceCurrencyCode
            formParams["quantity"] = quantity
            formParams["booking_start_at"] = bookingStartAt
            formParams["booking_end_at"] = bookingEndAt
            compositeParameters.form = formParams

            return compositeParameters.toParameters()
        }
    }

    /**
    The list of events
    - returns: Events
    - JSON: ["description": "An array of events", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Events", "optionalValue": "", "raw": ["$ref": "#/definitions/Events"], "optionalType": "Events?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Events", "success": true]
    */



    struct GetEventsTarget: APITargetType {
        let method: Moya.Method = .get

        let path: String = "/events"

        let offset: Int?
        let limit: Int?
        let categoryId: Int?

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var queryParams: Parameters = [:]
            queryParams["offset"] = offset
            queryParams["limit"] = limit
            queryParams["category_id"] = categoryId
            compositeParameters.query = queryParams

            return compositeParameters.toParameters()
        }
    }

    /**
    Create new event
    - returns: Event
    - JSON: ["description": "Successfully create event", "name": "success201", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Event", "optionalValue": "", "raw": ["$ref": "#/definitions/Event"], "optionalType": "Event?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 201, "type": "Event", "success": true]
    */



    struct CreateEventsTarget: APITargetType {
        let method: Moya.Method = .post

        let path: String = "/events"

        let name: String
        let categoryId: String
        let description: String
        let location: String
        let longitude: Double
        let latitude: Double
        let isPublic: Bool
//        let timetable: [TimetableParam]?
//        let ticket: TicketParam

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var formParams: Parameters = [:]
            formParams["name"] = name
            formParams["category_id"] = categoryId
            formParams["description"] = description
            formParams["location"] = location
            formParams["longitude"] = longitude
            formParams["latitude"] = latitude
            formParams["is_public"] = isPublic
//            formParams["timetable"] = timetable
//            formParams["ticket"] = ticket
            compositeParameters.form = formParams

            return compositeParameters.toParameters()
        }
    }

    /**
    Get events which the user will attend
    - returns: Events
    - JSON: ["description": "object events", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Events", "optionalValue": "", "raw": ["$ref": "#/definitions/Events"], "optionalType": "Events?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Events", "success": true]
    */



    struct GetMeEventListTarget: APITargetType {
        let method: Moya.Method = .get

        let path: String = "/me/events"

        let offset: Int?
        let limit: Int?

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var queryParams: Parameters = [:]
            queryParams["offset"] = offset
            queryParams["limit"] = limit
            compositeParameters.query = queryParams

            return compositeParameters.toParameters()
        }
    }

    /**
    Delete timetable ( Event owner can do if no one book the ticket )
    - returns: Status
    - JSON: ["description": "Successfully delete timetable", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Status", "optionalValue": "", "raw": ["$ref": "#/definitions/Status"], "optionalType": "Status?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Status", "success": true]
    */



    struct DeleteTimetableTarget: APITargetType {
        let method: Moya.Method = .delete

        var path: String {
            let targetPath: String = "/timetables/{id}"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
    }

    /**
    Update timetable ( Event owner can do ).
    - returns: Ticket
    - JSON: ["description": "Successfully update tickets", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Ticket", "optionalValue": "", "raw": ["$ref": "#/definitions/Ticket"], "optionalType": "Ticket?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Ticket", "success": true]
    */



    struct UpdateTimetableTarget: APITargetType {
        let method: Moya.Method = .put

        var path: String {
            let targetPath: String = "/timetables/{id}"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
        let name: String?
        let description: String?
        let startAt: Double?
        let endAt: Double?
        let location: String
        let longitude: Double
        let latitude: Double

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var formParams: Parameters = [:]
            formParams["name"] = name
            formParams["description"] = description
            formParams["start_at"] = startAt
            formParams["end_at"] = endAt
            formParams["location"] = location
            formParams["longitude"] = longitude
            formParams["latitude"] = latitude
            compositeParameters.form = formParams

            return compositeParameters.toParameters()
        }
    }

    /**
    Purchase ticket
    - returns: Event
    - JSON: ["description": "Event object", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Event", "optionalValue": "", "raw": ["$ref": "#/definitions/Event"], "optionalType": "Event?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Event", "success": true]
    */



    struct TicketPurchaseTarget: APITargetType {
        let method: Moya.Method = .post

        var path: String {
            let targetPath: String = "/tickets/{id}/purchase"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
        let paymentMethodNonce: String

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var formParams: Parameters = [:]
            formParams["payment_method_nonce"] = paymentMethodNonce
            compositeParameters.form = formParams

            return compositeParameters.toParameters()
        }
    }

    /**
    Get Attendee list of private event
    - returns: Users
    - JSON: ["description": "Event Attendee List", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Users", "optionalValue": "", "raw": ["$ref": "#/definitions/Users"], "optionalType": "Users?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Users", "success": true]
    */



    struct GetEventAttendeesTarget: APITargetType {
        let method: Moya.Method = .get

        var path: String {
            let targetPath: String = "/events/{id}/attendees"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
    }

    /**
    Add new ticket to event ( Event owner can do ).
    - returns: Ticket
    - JSON: ["description": "Successfully add new tickets", "name": "success201", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Ticket", "optionalValue": "", "raw": ["$ref": "#/definitions/Ticket"], "optionalType": "Ticket?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 201, "type": "Ticket", "success": true]
    */



    struct AddTicketTarget: APITargetType {
        let method: Moya.Method = .post

        var path: String {
            let targetPath: String = "/events/{id}/tickets"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
        let name: String?
        let timetableId: [Int]?
        let description: String?
        let price: Double?
        let priceCurrencyCode: String?
        let quantity: Int?
        let bookingStartAt: Int?
        let bookingEndAt: Int?

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var formParams: Parameters = [:]
            formParams["name"] = name
            formParams["timetable_id"] = timetableId
            formParams["description"] = description
            formParams["price"] = price
            formParams["price_currency_code"] = priceCurrencyCode
            formParams["quantity"] = quantity
            formParams["booking_start_at"] = bookingStartAt
            formParams["booking_end_at"] = bookingEndAt
            compositeParameters.form = formParams

            return compositeParameters.toParameters()
        }
    }

    /**
    Delete message ( Event owner / Message owner can do )
    - returns: Status
    - JSON: ["description": "Successfully delete timetable", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Status", "optionalValue": "", "raw": ["$ref": "#/definitions/Status"], "optionalType": "Status?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Status", "success": true]
    */



    struct DeleteMessageTarget: APITargetType {
        let method: Moya.Method = .delete

        var path: String {
            let targetPath: String = "/messages/{id}"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
    }

    /**
    Get Event Booking List
    - returns: EventBookings
    - JSON: ["description": "Event object", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "EventBookings", "optionalValue": "", "raw": ["$ref": "#/definitions/EventBookings"], "optionalType": "EventBookings?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "EventBookings", "success": true]
    */



    struct GetEventBookingTarget: APITargetType {
        let method: Moya.Method = .get

        var path: String {
            let targetPath: String = "/events/{id}/bookings"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
        let offset: Int?
        let limit: Int?

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var queryParams: Parameters = [:]
            queryParams["offset"] = offset
            queryParams["limit"] = limit
            compositeParameters.query = queryParams

            return compositeParameters.toParameters()
        }
    }

    /**
    Get Event Detail
    - returns: Event
    - JSON: ["description": "Event object", "name": "success200", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Event", "optionalValue": "", "raw": ["$ref": "#/definitions/Event"], "optionalType": "Event?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 200, "type": "Event", "success": true]
    */



    struct GetEventTarget: APITargetType {
        let method: Moya.Method = .get

        var path: String {
            let targetPath: String = "/events/id"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: String
    }

    /**
    Add new timetable to event ( Event owner can do ).
    - returns: Timetable
    - JSON: ["description": "Successfully add new tickets", "name": "success201", "schema": ["enumName": "UNKNOWN", "name": "UNKNOWN", "value": "", "isDictionary": false, "isGlobal": false, "type": "Timetable", "optionalValue": "", "raw": ["$ref": "#/definitions/Timetable"], "optionalType": "Timetable?", "optional": true, "isArray": false, "required": false, "encodedValue": "UNKNOWN?.encode()"], "statusCode": 201, "type": "Timetable", "success": true]
    */



    struct AddTimetableTarget: APITargetType {
        let method: Moya.Method = .post

        var path: String {
            let targetPath: String = "/events/{id}/timetables"
            return targetPath
                .replacingOccurrences(of: "id", with: "\(id)")
        }


        let id: Int
        let name: String
        let description: String
        let startAt: Double
        let endAt: Double
        let location: String?
        let longitude: Double?
        let latitude: Double?

        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var formParams: Parameters = [:]
            formParams["name"] = name
            formParams["description"] = description
            formParams["start_at"] = startAt
            formParams["end_at"] = endAt
            formParams["location"] = location
            formParams["longitude"] = longitude
            formParams["latitude"] = latitude
            compositeParameters.form = formParams

            return compositeParameters.toParameters()
        }
    }
}
